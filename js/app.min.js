/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst body = document.querySelector(\"body\");\r\ntry {\r\n  const sliderMain = new Swiper(\".mainslider__gallary\", {\r\n    slidesPerView: 1,\r\n    slidesPerGroup: 1,\r\n    loop: true,\r\n    autoplay: {\r\n      delay: 4000,\r\n      disableOnInteraction: false,\r\n    },\r\n    on: {\r\n      init() {\r\n        this.el.addEventListener(\"mouseenter\", () => {\r\n          this.autoplay.stop();\r\n        });\r\n\r\n        this.el.addEventListener(\"mouseleave\", () => {\r\n          this.autoplay.start();\r\n        });\r\n      },\r\n    },\r\n    speed: 1000,\r\n    navigation: {\r\n      nextEl: \".btn-next\",\r\n      prevEl: \".btn-prev\",\r\n    },\r\n    pagination: {\r\n      el: \".swiper-pagination\",\r\n      clickable: true,\r\n    },\r\n  });\r\n} catch (e) {\r\n  Error;\r\n}\r\ntry {\r\n  const sliderBrand = new Swiper(\".brandslider__gallary\", {\r\n    slidesPerView: 1,\r\n    slidesPerGroup: 1,\r\n    spaceBetween: 5,\r\n    breakpoints: {\r\n      610: {\r\n        slidesPerView: 2,\r\n        spaceBetween: 20,\r\n      },\r\n      767.98: {\r\n        slidesPerView: 3,\r\n        spaceBetween: 40,\r\n      },\r\n    },\r\n    loop: true,\r\n    autoplay: {\r\n      delay: 500,\r\n      disableOnInteraction: false,\r\n    },\r\n    on: {\r\n      init() {\r\n        this.el.addEventListener(\"mouseenter\", () => {\r\n          this.autoplay.stop();\r\n        });\r\n\r\n        this.el.addEventListener(\"mouseleave\", () => {\r\n          this.autoplay.start();\r\n        });\r\n      },\r\n    },\r\n    speed: 3000,\r\n    navigation: {\r\n      nextEl: \".brand-btn-next\",\r\n      prevEl: \".brand-btn-prev\",\r\n    },\r\n  });\r\n} catch (e) {\r\n  Error;\r\n}\r\ntry {\r\n  const spoilersArray = document.querySelectorAll(\"[data-spoilers]\");\r\n  if (spoilersArray.length > 0) {\r\n    const spoilersRegular = Array.from(spoilersArray).filter(function (\r\n      item,\r\n      index,\r\n      self\r\n    ) {\r\n      return !item.dataset.spoilers.split(\",\")[0];\r\n    });\r\n    if (spoilersRegular.length > 0) {\r\n      initSpoilers(spoilersRegular);\r\n    }\r\n    const spoilersMedia = Array.from(spoilersArray).filter(function (\r\n      item,\r\n      index,\r\n      self\r\n    ) {\r\n      return item.dataset.spoilers.split(\",\")[0];\r\n    });\r\n    if (spoilersMedia.length > 0) {\r\n      const breakpointsArray = [];\r\n      spoilersMedia.forEach((item) => {\r\n        const params = item.dataset.spoilers;\r\n        const breakpoint = {};\r\n        const paramsArray = params.split(\",\");\r\n        breakpoint.value = paramsArray[0];\r\n        breakpoint.type = paramsArray[1] ? paramsArray[1].trim() : \"max\";\r\n        breakpoint.item = item;\r\n        breakpointsArray.push(breakpoint);\r\n      });\r\n      let mediaQueries = breakpointsArray.map(function (item) {\r\n        return `(${item.type}-width:${item.value}px),${item.value},${item.type}`;\r\n      });\r\n      mediaQueries = mediaQueries.filter(function (item, index, self) {\r\n        return self.indexOf(item) === index;\r\n      });\r\n      mediaQueries.forEach((breakpoint) => {\r\n        const paramsArray = breakpoint.split(\",\");\r\n        const mediaBreakpoint = paramsArray[1];\r\n        const mediaType = paramsArray[2];\r\n        const matchMedia = window.matchMedia(paramsArray[0]);\r\n        const spoilersArray = breakpointsArray.filter(function (item) {\r\n          if (item.value === mediaBreakpoint && item.type === mediaType) {\r\n            return true;\r\n          }\r\n        });\r\n        matchMedia.addEventListener(\"change\", function () {\r\n          initSpoilers(spoilersArray, matchMedia);\r\n        });\r\n        initSpoilers(spoilersArray, matchMedia);\r\n      });\r\n    }\r\n    function initSpoilers(spoilersArray, matchMedia = false) {\r\n      spoilersArray.forEach((spoilersBlock) => {\r\n        spoilersBlock = matchMedia ? spoilersBlock.item : spoilersBlock;\r\n        if (matchMedia.matches || !matchMedia) {\r\n          spoilersBlock.classList.add(\"init\");\r\n          initSpoilerBody(spoilersBlock);\r\n          spoilersBlock.addEventListener(\"click\", setSpoilerAction);\r\n        } else {\r\n          spoilersBlock.classList.remove(\"init\");\r\n          initSpoilerBody(spoilersBlock, false);\r\n          spoilersBlock.removeEventListener(\"click\", setSpoilerAction);\r\n        }\r\n      });\r\n    }\r\n    function initSpoilerBody(spoilersBlock, hideSpoilerBody = true) {\r\n      const spoilerTitles = spoilersBlock.querySelectorAll(\"[data-spoiler]\");\r\n      if (spoilerTitles.length > 0) {\r\n        spoilerTitles.forEach((spoilerTitle) => {\r\n          if (hideSpoilerBody) {\r\n            spoilerTitle.removeAttribute(\"tabindex\");\r\n            if (!spoilerTitle.classList.contains(\"active\")) {\r\n              spoilerTitle.nextElementSibling.hidden = true;\r\n            }\r\n          } else {\r\n            spoilerTitle.setAttribute(\"tabindex\", \"-1\");\r\n            spoilerTitle.nextElementSibling.hidden = false;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    function setSpoilerAction(e) {\r\n      const el = e.target;\r\n      if (el.hasAttribute(\"data-spoiler\") || el.closest(\"[data-spoiler]\")) {\r\n        const spoilerTitle = el.hasAttribute(\"data-spoiler\")\r\n          ? el\r\n          : el.closest([\"data-spoiler\"]);\r\n        const spoilersBlock = spoilerTitle.closest(\"[data-spoilers]\");\r\n        const oneSpoiler = spoilersBlock.hasAttribute(\"data-one-spoiler\")\r\n          ? true\r\n          : false;\r\n        if (!spoilersBlock.querySelectorAll(\".slide\").length) {\r\n          if (oneSpoiler && !spoilerTitle.classList.contains(\"active\")) {\r\n            hideSpoilersBody(spoilersBlock);\r\n          }\r\n          spoilerTitle.classList.toggle(\"active\");\r\n          spoilerTitle.parentElement.classList.toggle(\"active\");\r\n          slideToggle(spoilerTitle.nextElementSibling, 800);\r\n        }\r\n        e.preventDefault();\r\n      }\r\n    }\r\n    function hideSpoilersBody(spoilersBlock) {\r\n      const spoilerActiveTitle = spoilersBlock.querySelector(\r\n        \"[data-spoiler].active\"\r\n      );\r\n      if (spoilerActiveTitle) {\r\n        spoilerActiveTitle.classList.remove(\"active\");\r\n        spoilerActiveTitle.parentElement.classList.remove(\"active\");\r\n        slideUp(spoilerActiveTitle.nextElementSibling, 800);\r\n      }\r\n    }\r\n  }\r\n  let slideUp = (target, duration = 800) => {\r\n    if (!target.classList.contains(\"slide\")) {\r\n      target.classList.add(\"slide\");\r\n      target.style.transitionProperty = \"height, margin, padding\";\r\n      target.style.transitionDuration = duration + \"ms\";\r\n      target.style.height = target.offsetHeight + \"px\";\r\n      target.offsetHeight;\r\n      target.style.overflow = \"hidden\";\r\n      target.style.height = 0;\r\n      target.style.paddingTop = 0;\r\n      target.style.paddingBottom = 0;\r\n      target.style.marginTop = 0;\r\n      target.style.marginBottom = 0;\r\n      window.setTimeout(() => {\r\n        target.hidden = true;\r\n        target.style.removeProperty(\"height\");\r\n        target.style.removeProperty(\"padding-top\");\r\n        target.style.removeProperty(\"padding-bottom\");\r\n        target.style.removeProperty(\"margin-top\");\r\n        target.style.removeProperty(\"margin-bottom\");\r\n        target.style.removeProperty(\"overflow\");\r\n        target.style.removeProperty(\"transition-duration\");\r\n        target.style.removeProperty(\"transition-property\");\r\n        target.classList.remove(\"slide\");\r\n      }, duration);\r\n    }\r\n  };\r\n  let slideDown = (target, duration = 800) => {\r\n    if (!target.classList.contains(\"slide\")) {\r\n      target.classList.add(\"slide\");\r\n      if (target.hidden) {\r\n        target.hidden = false;\r\n      }\r\n      let height = target.offsetHeight;\r\n      target.style.overflow = \"hidden\";\r\n      target.style.height = 0;\r\n      target.style.paddingTop = 0;\r\n      target.style.paddingBottom = 0;\r\n      target.style.marginTop = 0;\r\n      target.style.marginBottom = 0;\r\n      target.offsetHeight;\r\n      target.style.transitionProperty = \"height, margin, padding\";\r\n      target.style.transitionDuration = duration + \"ms\";\r\n      target.style.height = height + \"px\";\r\n      target.style.removeProperty(\"padding-top\");\r\n      target.style.removeProperty(\"padding-bottom\");\r\n      target.style.removeProperty(\"margin-top\");\r\n      target.style.removeProperty(\"margin-bottom\");\r\n      window.setTimeout(() => {\r\n        target.style.removeProperty(\"height\");\r\n        target.style.removeProperty(\"overflow\");\r\n        target.style.removeProperty(\"transition-duration\");\r\n        target.style.removeProperty(\"transition-property\");\r\n        target.classList.remove(\"slide\");\r\n      }, duration);\r\n    }\r\n  };\r\n  let slideToggle = (target, duration = 800) => {\r\n    if (target.hidden) {\r\n      return slideDown(target, duration);\r\n    } else {\r\n      return slideUp(target, duration);\r\n    }\r\n  };\r\n} catch (e) {\r\n  Error;\r\n}\r\n\r\ntry {\r\n  const navigationBtns = document.querySelectorAll(\".header__nav\");\r\n  navigationBtns.forEach((button) => {\r\n    button.addEventListener(\"click\", (e) => {\r\n      body.classList.remove(\"active\");\r\n      if (e.target == button.children[0]) {\r\n        const services = document.querySelector(\".services\");\r\n        services.scrollIntoView({\r\n          block: \"start\",\r\n          behavior: \"smooth\",\r\n        });\r\n      } else if (e.target == button.children[1]) {\r\n        const laboratory = document.querySelector(\".laboratory\");\r\n        laboratory.scrollIntoView({\r\n          block: \"start\",\r\n          behavior: \"smooth\",\r\n        });\r\n      } else if (e.target == button.children[2]) {\r\n        const pharmacy = document.querySelector(\".pharmacy\");\r\n        pharmacy.scrollIntoView({\r\n          block: \"start\",\r\n          behavior: \"smooth\",\r\n        });\r\n      } else if (e.target == button.children[3]) {\r\n        const offers = document.querySelector(\".offers\");\r\n        offers.scrollIntoView({\r\n          block: \"start\",\r\n          behavior: \"smooth\",\r\n        });\r\n      } else if (e.target == button.children[4]) {\r\n        const suppliers = document.querySelector(\".suppliers\");\r\n        suppliers.scrollIntoView({\r\n          block: \"start\",\r\n          behavior: \"smooth\",\r\n        });\r\n      } else if (e.target == button.children[5]) {\r\n        const vacancies = document.querySelector(\".vacancies\");\r\n        vacancies.scrollIntoView({\r\n          block: \"start\",\r\n          behavior: \"smooth\",\r\n        });\r\n      } else {\r\n        const footer = document.querySelector(\".footer\");\r\n        footer.scrollIntoView({\r\n          block: \"start\",\r\n          behavior: \"smooth\",\r\n        });\r\n      }\r\n      e.preventDefault();\r\n    });\r\n  });\r\n} catch (e) {\r\n  Error;\r\n}\r\ntry {\r\n  const burger = document.querySelector(\".header__body-burg\");\r\n\r\n  burger.addEventListener(\"click\", () => {\r\n    document.body.classList.toggle(\"lock\");\r\n    burger.classList.toggle(\"active\");\r\n    body.classList.toggle(\"active\");\r\n  });\r\n} catch (e) {\r\n  Error;\r\n}\r\n\n\n//# sourceURL=webpack://gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;